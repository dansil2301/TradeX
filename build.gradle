plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'Eco'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'ru.tinkoff.piapi:java-sdk-core:1.5'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'mysql:mysql-connector-java:8.0.26'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

jacoco {
	toolVersion = "0.8.7"
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	archiveFileName = "tradex.jar" // Set the name of the JAR file
	destinationDirectory = file("$buildDir/docker") // Set the directory where the JAR will be placed
}

project.jacocoTestReport {
	executionData tasks.withType(Test).findAll { it.state.executed }
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/Eco/TradeX/domain/**'])
		})
	}
	reports {
		xml {
			enabled true
		}
		html {
			enabled true
		}
		xml.destination(file("$buildDir/all-tests/jacocoAllTestReport.xml"))
		html.destination(file("$buildDir/all-tests/html"))
	}
	executionData(test)
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.8
			}
		}
	}

	sourceDirectories = files(sourceSets.main.allJava.srcDirs)

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/Eco/TradeX/domain/**'])
		})
	}
}

tasks.named('check') {
	dependsOn 'jacocoTestCoverageVerification'
}